// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sport {
  sportId            Int                @id @default(autoincrement())
  name               String             @db.VarChar(30)
  description        String             @db.VarChar(255)
  image              String             @db.VarChar(255)
  gameModes          GameMode[]
  matches            Match[]
  questionsTemplates QuestionTemplate[]
  searchParameters   SearchParameter[]
  teams              Team[]
  sportPlayers       SportPlayer[]
}

model GameMode {
  gameModeId       Int               @id @default(autoincrement())
  name             String            @db.VarChar(30)
  description      String            @db.VarChar(255)
  sport            Sport             @relation(fields: [sportId], references: [sportId])
  sportId          Int
  searchParameters SearchParameter[]
  matches          Match[]
}

model SportField {
  sportFieldId Int     @id @default(autoincrement())
  name         String  @db.VarChar(100)
  address      String  @db.VarChar(255)
  matches      Match[]
}

model Match {
  matchId          Int           @id @default(autoincrement())
  date             DateTime      @db.Date()
  time             DateTime      @db.Timetz()
  district         String        @db.VarChar(50)
  registrationDate DateTime      @db.Timestamptz()
  stateField       Boolean       @default(false)
  sport            Sport         @relation(fields: [sportId], references: [sportId])
  sportId          Int
  gameMode         GameMode      @relation(fields: [gameModeId], references: [gameModeId])
  gameModeId       Int
  sportField       SportField    @relation(fields: [sportFieldId], references: [sportFieldId])
  sportFieldId     Int
  teamMatches      TeamMatch[]
  matchMembers     MatchMember[]
}

model Player {
  playerId         Int           @id @default(autoincrement())
  userName         String        @db.VarChar(100)
  password         String        @db.VarChar(100)
  firstName        String        @db.VarChar(100)
  lastName         String        @db.VarChar(100)
  phoneNumber      String        @db.Char(9)
  email            String?       @db.VarChar(100)
  birthDate        DateTime      @db.Date()
  image            String        @db.VarChar(255)
  gender           String        @db.VarChar(20)
  district         String        @db.VarChar(50)
  registrationDate DateTime      @db.Timestamptz()
  availability     Boolean       @default(false)
  subscription     Boolean       @default(false)
  searchStatus     Boolean       @default(false)
  teamMatches      TeamMatch[]
  sportsPlayer     SportPlayer[]
  members          Member[]
}

model Team {
  teamId           Int               @id @default(autoincrement())
  name             String            @db.VarChar(100)
  logo             String            @db.VarChar(255)
  registrationDate DateTime          @db.Timestamptz()
  searchStatus     String            @db.Char(1)
  sport            Sport             @relation(fields: [sportId], references: [sportId])
  sportId          Int
  searchParameters SearchParameter[]
  members          Member[]
  teamMatches      TeamMatch[]
}

model SearchParameter {
  searchParameterId Int      @id @default(autoincrement())
  matchDate         DateTime @db.Date()
  matchStartTime    DateTime @db.Timetz()
  matchEndTime      DateTime @db.Timetz()
  district          String   @db.VarChar(50)
  sport             Sport    @relation(fields: [sportId], references: [sportId])
  sportId           Int
  gameMode          GameMode @relation(fields: [gameModeId], references: [gameModeId])
  gameModeId        Int
  team              Team     @relation(fields: [teamId], references: [teamId])
  teamId            Int
}

model QuestionTemplate {
  questionTemplateId Int      @id @default(autoincrement())
  question           String   @db.VarChar(255)
  sport              Sport    @relation(fields: [sportId], references: [sportId])
  sportId            Int
  answers            Answer[]

  @@map("QuestionsTemplate")
}

model Answer {
  answerId           Int              @id @default(autoincrement())
  answer             String           @db.VarChar(255)
  question           QuestionTemplate @relation(fields: [questionTemplateId], references: [questionTemplateId])
  questionTemplateId Int
  preferences        Preference[]
}

model SportPlayer {
  sport       Sport        @relation(fields: [sportId], references: [sportId])
  sportId     Int
  player      Player       @relation(fields: [playerId], references: [playerId])
  playerId    Int
  preferences Preference[]
  state       Boolean      @default(true)

  @@id([sportId, playerId])
}

model Preference {
  sportsPlayer SportPlayer @relation(fields: [playerId, sportId], references: [playerId, sportId], onDelete: Cascade)
  playerId     Int
  sportId      Int
  answer       Answer      @relation(fields: [answerId], references: [answerId])
  answerId     Int

  @@id([playerId, answerId, sportId])
}

model Member {
  player           Player        @relation(fields: [playerId], references: [playerId])
  playerId         Int
  team             Team          @relation(fields: [teamId], references: [teamId])
  teamId           Int
  role             String        @db.VarChar(1)
  registrationDate DateTime      @db.Timestamptz()
  status           Boolean       @default(false)
  matchMembers     MatchMember[]

  @@id([playerId, teamId])
}

model TeamMatch {
  team      Team    @relation(fields: [teamId], references: [teamId])
  teamId    Int
  match     Match   @relation(fields: [matchId], references: [matchId])
  matchId   Int
  statusNFU Boolean @default(false)
  player    Player? @relation(fields: [playerId], references: [playerId])
  playerId  Int?

  @@id([teamId, matchId])
}

model MatchMember {
  member   Member @relation(fields: [playerId, teamId], references: [playerId, teamId])
  playerId Int
  teamId   Int
  match    Match  @relation(fields: [matchId], references: [matchId])
  matchId  Int

  @@id([playerId, teamId, matchId])
}
