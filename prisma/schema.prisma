// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sport {
  sportId           Int                 @id @default(autoincrement())
  sportName         String              @db.VarChar(30)
  sportDescription  String              @db.VarChar(255)
  sportImage        String              @db.VarChar(255)
  GameMode          GameMode[]
  Match             Match[]
  QuestionsTemplate QuestionsTemplate[]
  SearchParameters  SearchParameters[]
  Team              Team[]
  SportPlayer       SportPlayer[]
}

model GameMode {
  gameModeId          Int                @id @default(autoincrement())
  gameModeName        String             @db.VarChar(30)
  gameModeDescription String             @db.VarChar(255)
  Sport               Sport              @relation(fields: [sportId], references: [sportId])
  sportId             Int
  SearchParameters    SearchParameters[]
  Match               Match[]
}

model SportField {
  sportFieldId      Int     @id @default(autoincrement())
  sportFieldName    String  @db.VarChar(100)
  sportFieldAddress String  @db.VarChar(255)
  Match             Match[]
}

model Match {
  matchId               Int            @id @default(autoincrement())
  matchDate             DateTime       @db.Date()
  matchTime             DateTime       @db.Timetz()
  matchDistrict         String         @db.VarChar(50)
  matchRegistrationDate DateTime       @db.Timestamptz()
  stateField            Boolean        @default(false)
  Sport                 Sport          @relation(fields: [sportId], references: [sportId])
  sportId               Int
  GameMode              GameMode       @relation(fields: [gameModeId], references: [gameModeId])
  gameModeId            Int
  SportField            SportField     @relation(fields: [sportFieldId], references: [sportFieldId])
  sportFieldId          Int
  TeamMatch             TeamMatch[]
  MembersMatch          MembersMatch[]
}

model Player {
  playerId               Int           @id @default(autoincrement())
  playerUserName         String        @db.VarChar(100)
  playerPassword         String        @db.VarChar(100)
  playerFirstName        String        @db.VarChar(100)
  playerLastName         String        @db.VarChar(100)
  playerPhoneNumber      String        @db.Char(9)
  playerEmail            String?       @db.VarChar(100)
  playerBirthDate        DateTime      @db.Date()
  playerImage            String        @db.VarChar(255)
  playerGender           String        @db.VarChar(20)
  playerDistrict         String        @db.VarChar(50)
  playerRegistrationDate DateTime      @db.Timestamptz()
  playerAvailability     Boolean       @default(false)
  playerSubscription     Boolean       @default(false)
  playerSearchStatus     Boolean       @default(false)
  TeamMatch              TeamMatch[]
  SportPlayer            SportPlayer[]
  Members                Members[]
}

model Team {
  teamId               Int                @id @default(autoincrement())
  teamName             String             @db.VarChar(100)
  teamLogo             String             @db.VarChar(255)
  teamRegistrationDate DateTime           @db.Timestamptz()
  teamSearchStatus     String             @db.Char(1)
  Sport                Sport              @relation(fields: [sportId], references: [sportId])
  sportId              Int
  SearchParameters     SearchParameters[]
  Members              Members[]
  TeamMatch            TeamMatch[]
}

model SearchParameters {
  searchParametersId             Int      @id @default(autoincrement())
  searchParametersMatchDate      DateTime @db.Date()
  searchParametersMatchStartTime DateTime @db.Timetz()
  searchParametersMatchEndTime   DateTime @db.Timetz()
  searchParametersDistrict       String   @db.VarChar(50)
  Sport                          Sport    @relation(fields: [sportId], references: [sportId])
  sportId                        Int
  GameMode                       GameMode @relation(fields: [gameModeId], references: [gameModeId])
  gameModeId                     Int
  Team                           Team     @relation(fields: [teamId], references: [teamId])
  teamId                         Int
}

model QuestionsTemplate {
  questionsTemplateId Int      @id @default(autoincrement())
  question            String   @db.VarChar(255)
  Sport               Sport    @relation(fields: [sportId], references: [sportId])
  sportId             Int
  Answer              Answer[]
}

model Answer {
  answerId            Int               @id @default(autoincrement())
  answer              String            @db.VarChar(255)
  Question            QuestionsTemplate @relation(fields: [questionsTemplateId], references: [questionsTemplateId])
  questionsTemplateId Int
  Preferences         Preferences[]
}

model SportPlayer {
  Sport       Sport         @relation(fields: [sportId], references: [sportId])
  sportId     Int
  Player      Player        @relation(fields: [playerId], references: [playerId])
  playerId    Int
  Preferences Preferences[]
  status      Boolean       @default(true)

  @@id([sportId, playerId])
}

model Preferences {
  SportPlayer SportPlayer @relation(fields: [playerId, sportId], references: [playerId, sportId])
  playerId    Int
  sportId     Int
  Answer      Answer      @relation(fields: [answerId], references: [answerId])
  answerId    Int

  @@id([playerId, sportId, answerId])
}

model Members {
  Player                 Player         @relation(fields: [playerId], references: [playerId])
  playerId               Int
  Team                   Team           @relation(fields: [teamId], references: [teamId])
  teamId                 Int
  memberRole             String         @db.VarChar(1)
  memberRegistrationDate DateTime       @db.Timestamptz()
  memberStatus           Boolean        @default(false)
  MembersMatch           MembersMatch[]

  @@id([playerId, teamId])
}

model TeamMatch {
  Team      Team    @relation(fields: [teamId], references: [teamId])
  teamId    Int
  Match     Match   @relation(fields: [matchId], references: [matchId])
  matchId   Int
  statusNFU Boolean @default(false)
  Player    Player? @relation(fields: [playerId], references: [playerId])
  playerId  Int?

  @@id([teamId, matchId])
}

model MembersMatch {
  Members  Members @relation(fields: [playerId, teamId], references: [playerId, teamId])
  playerId Int
  teamId   Int
  Match    Match   @relation(fields: [matchId], references: [matchId])
  matchId  Int

  @@id([playerId, teamId, matchId])
}
