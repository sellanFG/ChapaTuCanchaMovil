// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sport {
  sportId            Int                 @id @default(autoincrement())
  sportName          String              @db.VarChar(30)
  sportDescription   String              @db.VarChar(255)
  sportImage         String              @db.VarChar(255)
  gameModes          GameMode[]
  matches            Match[]
  questionsTemplates QuestionsTemplate[]
  searchParameters   SearchParameter[]
  teams              Team[]
  sportPlayers       SportPlayer[]
}

model GameMode {
  gameModeId          Int               @id @default(autoincrement())
  gameModeName        String            @db.VarChar(30)
  gameModeDescription String            @db.VarChar(255)
  sport               Sport             @relation(fields: [sportId], references: [sportId])
  sportId             Int
  searchParameters    SearchParameter[]
  matches             Match[]
}

model SportField {
  sportFieldId      Int     @id @default(autoincrement())
  sportFieldName    String  @db.VarChar(100)
  sportFieldAddress String  @db.VarChar(255)
  matches           Match[]
}

model Match {
  matchId               Int           @id @default(autoincrement())
  matchDate             DateTime      @db.Date()
  matchTime             DateTime      @db.Timetz()
  matchDistrict         String        @db.VarChar(50)
  matchRegistrationDate DateTime      @db.Timestamptz()
  stateField            Boolean       @default(false)
  sport                 Sport         @relation(fields: [sportId], references: [sportId])
  sportId               Int
  gameMode              GameMode      @relation(fields: [gameModeId], references: [gameModeId])
  gameModeId            Int
  sportField            SportField    @relation(fields: [sportFieldId], references: [sportFieldId])
  sportFieldId          Int
  teamMatches           TeamMatch[]
  matchMembers          MatchMember[]
}

model Player {
  playerId               Int           @id @default(autoincrement())
  playerUserName         String        @db.VarChar(100)
  playerPassword         String        @db.VarChar(100)
  playerFirstName        String        @db.VarChar(100)
  playerLastName         String        @db.VarChar(100)
  playerPhoneNumber      String        @db.Char(9)
  playerEmail            String?       @db.VarChar(100)
  playerBirthDate        DateTime      @db.Date()
  playerImage            String        @db.VarChar(255)
  playerGender           String        @db.VarChar(20)
  playerDistrict         String        @db.VarChar(50)
  playerRegistrationDate DateTime      @db.Timestamptz()
  playerAvailability     Boolean       @default(false)
  playerSubscription     Boolean       @default(false)
  playerSearchStatus     Boolean       @default(false)
  teamMatches            TeamMatch[]
  sportsPlayer           SportPlayer[]
  members                Member[]
}

model Team {
  teamId               Int               @id @default(autoincrement())
  teamName             String            @db.VarChar(100)
  teamLogo             String            @db.VarChar(255)
  teamRegistrationDate DateTime          @db.Timestamptz()
  teamSearchStatus     String            @db.Char(1)
  sport                Sport             @relation(fields: [sportId], references: [sportId])
  sportId              Int
  searchParameters     SearchParameter[]
  members              Member[]
  teamMatches          TeamMatch[]
}

model SearchParameter {
  searchParameterId             Int      @id @default(autoincrement())
  searchParameterMatchDate      DateTime @db.Date()
  searchParameterMatchStartTime DateTime @db.Timetz()
  searchParameterMatchEndTime   DateTime @db.Timetz()
  searchParameterDistrict       String   @db.VarChar(50)
  sport                         Sport    @relation(fields: [sportId], references: [sportId])
  sportId                       Int
  gameMode                      GameMode @relation(fields: [gameModeId], references: [gameModeId])
  gameModeId                    Int
  team                          Team     @relation(fields: [teamId], references: [teamId])
  teamId                        Int
}

model QuestionsTemplate {
  questionsTemplateId Int      @id @default(autoincrement())
  question            String   @db.VarChar(255)
  sport               Sport    @relation(fields: [sportId], references: [sportId])
  sportId             Int
  answers             Answer[]
}

model Answer {
  answerId            Int               @id @default(autoincrement())
  answer              String            @db.VarChar(255)
  question            QuestionsTemplate @relation(fields: [questionsTemplateId], references: [questionsTemplateId])
  questionsTemplateId Int
  preferences         Preference[]
}

model SportPlayer {
  sport       Sport        @relation(fields: [sportId], references: [sportId])
  sportId     Int
  player      Player       @relation(fields: [playerId], references: [playerId])
  playerId    Int
  preferences Preference[]

  @@id([sportId, playerId])
}

model Preference {
  sportsPlayer SportPlayer @relation(fields: [playerId, sportId], references: [playerId, sportId], onDelete: Cascade)
  playerId     Int
  sportId      Int
  answer       Answer      @relation(fields: [answerId], references: [answerId])
  answerId     Int

  @@id([playerId, answerId, sportId])
}

model Member {
  player                 Player        @relation(fields: [playerId], references: [playerId])
  playerId               Int
  team                   Team          @relation(fields: [teamId], references: [teamId])
  teamId                 Int
  memberRole             String        @db.VarChar(1)
  memberRegistrationDate DateTime      @db.Timestamptz()
  memberStatus           Boolean       @default(false)
  matchMembers           MatchMember[]

  @@id([playerId, teamId])
}

model TeamMatch {
  team      Team    @relation(fields: [teamId], references: [teamId])
  teamId    Int
  match     Match   @relation(fields: [matchId], references: [matchId])
  matchId   Int
  statusNFU Boolean @default(false)
  player    Player? @relation(fields: [playerId], references: [playerId])
  playerId  Int?

  @@id([teamId, matchId])
}

model MatchMember {
  member   Member @relation(fields: [playerId, teamId], references: [playerId, teamId])
  playerId Int
  teamId   Int
  match    Match  @relation(fields: [matchId], references: [matchId])
  matchId  Int

  @@id([playerId, teamId, matchId])
}
